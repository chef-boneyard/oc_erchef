# -*- mode: ruby -*-
# vi: set ft=ruby

require "yaml"
require "pp"

# We're going to cheat a bit here - just snag the command given from the shell
# and only enforce our restrictions when it makes sense
# TODO support for install or download:
# - chef server
# - server plugins
# - chef dk
# - chef client
# - let's just assume for now that it's in the same path as the installer
#

action = ARGV.shift
# Our additional args come after argv[1] - which could be meant for vagrant,
# or -- to indicate that it's for us
ARGV.shift
installer = ARGV.shift || ENV['INSTALLER']

if action =~ /^(provision|up|reload)$/
  installer_path = nil
  server_installer_name = nil
  attributes = YAML.load_file("defaults.yml")
  raise "Please set INSTALLER to the path to the .deb package for Chef Server 12+." if installer.nil?
  raise "#{installer} does not exist! Please fix this." unless File.file?(installer)
  %w{vagrant-omnibus vagrant-cachier}.each do |plugin|
    unless Vagrant.has_plugin?(plugin)
      raise "Please install #{plugin} before proceeding: vagrant install #{plugin}"
    end
  end
  # TODO
  installer_path = File.dirname(File.expand_path(installer))
  server_installer_name = File.basename(installer)

  # TODO
  chefdk_installer_name = "chefdk_0.4.0-1_amd64.deb"

else
  # Set some defaults so the other actions don't cause config load failures
  # These won't actually get used.
  installer_path = "/tmp"
  server_installer_name = "installer"
  chefdk_installer_name = ""
end

Vagrant.configure("2") do |config|
  config.vm.box     = "oc_erchef-ubuntu-14.04"
  config.vm.box_url= "https://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-14.04_chef-provisionerless.box"
  config.vm.hostname = "api.chef-server.dev"
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--memory", 4096, "--cpus", 4]
    if attributes
      json = {
        "chef-server" => {
          # TODO - configurable?
          "installers" => [ server_installer_name, chefdk_installer_name ]
        },
        "packages" => attributes["config"]["packages"],
        "orgs" => attributes["orgs"],
        "users" => attributes["users"]
      }
    end
    config.vm.synced_folder ENV['HOME'], "/mnt/host"
    config.vm.synced_folder installer_path, "/mnt/installers"
    # TODO chef_zero is documented, but not working in current version?
    config.vm.provision "chef_solo" do |chef|
      # TODO can we just use a btach provisioner to instal the chefdk package, then
      # use that chef-client instaed fo
      # config.omnibus.chef_version = :latest
      chef.cookbooks_path = "cookbooks"
      config.cache.auto_detect
      # Again, wtf, is supported in current docs?
      #chef.install = true
      #chef.log_level = "fatal"
      chef.add_recipe("chef-server::provision")
      #chef.add_recipe("piab::apt")
      chef.add_recipe("piab::default")
      #chef.add_recipe("piab::orgs-and-users")
      #chef.add_recipe("piab::dev")
      chef.json = json if json
    end
  end


end
